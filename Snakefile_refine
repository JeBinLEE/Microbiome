from snakemake.shell import shell
shell.executable("/bin/bash")
import os

# =========================================================
# 환경변수(필요 시 export로 덮어쓰기)
# =========================================================
REF_DIR          = os.environ.get("REF_DIR", "NCBI-RefSeq-16s-202505")

# QIIME2 분석 산출 루트
ANALYSIS         = os.environ.get("ANALYSIS", "GutBiomeTech/blast_results")

# FASTQ 위치 & 파일 접미사
FASTQ_DIR        = os.environ.get("FASTQ_DIR", "/home/ljb/qiime2_analysis/GutBiomeTech/M17_fastq")
SUFFIX_R1        = os.environ.get("SUFFIX_R1", "_L001_R1_001.fastq.gz")
SUFFIX_R2        = os.environ.get("SUFFIX_R2", "_L001_R2_001.fastq.gz")

# 쓰레드
THREADS_CUTADAPT = os.environ.get("THREADS_CUTADAPT", "24")
THREADS_BLAST    = os.environ.get("THREADS_BLAST", "48")

# MicrobiomeAnalyst 경로/출력
MA_DIR       = os.environ.get("MA_DIR", "GutBiomeTech/MicrobiomeAnalyst")
MA_UPLOAD_DIR = f"{MA_DIR}/upload"  # feature/tax/meta 업로드 파일 위치
MA_OUTDIR    = os.environ.get("MA_OUTDIR", f"{MA_DIR}/results_R_test_MA2")
MA_GROUP     = os.environ.get("MA_GROUP", "Group1")    # 메타데이터의 그룹 열명
# RAREFY_Q     = os.environ.get("RAREFY_Q", "0.00")      # 0.00이면 min, 0~1이면 quantile

# LEfSe 전용 출력 디렉토리
LEFSE_OUTDIR = os.environ.get(
    "LEFSE_OUTDIR",
    "/home/ljb/qiime2_analysis/GutBiomeTech/MicrobiomeAnalyst/results_R_test_MA2/04_LEfse",
)

# Rscript 바이너리
RS_BIN = os.environ.get("RS_BIN", "/usr/bin/Rscript")

# 내부 파일(센티널 등)
MANIFEST     = f"{ANALYSIS}/sample_manifest.txt"
ANALYZE_DONE = ".done/_3_analyze_sh.done"

# =========================================================
# 최종 타깃
# =========================================================
rule all:
    input:
        # QIIME2 분석 완료 센티널
        ANALYZE_DONE,
        # MicrobiomeAnalyst 업로드 파일
        f"{MA_UPLOAD_DIR}/feature_table_for_MA.txt",
        f"{MA_UPLOAD_DIR}/metadata_for_MA.txt",
        f"{MA_UPLOAD_DIR}/taxonomy_for_MA.txt",
        # MA 전체 파이프라인 완료
        f"{MA_OUTDIR}/.done_pipeline",
        # pairwise LEfSe 완료
        f"{LEFSE_OUTDIR}/.done_pairwise",
        # 그림 수집 완료
        f"{MA_OUTDIR}/.done_figures"

# =========================================================
# 1) RefSeq 16S DB 구축 (이미 있으면 스킵)
# =========================================================
rule build_db:
    output:
        db  = f"{REF_DIR}/ncbi-refseqs-blastdb.qza",
        tax = f"{REF_DIR}/ncbi-refseqs-taxonomy-derep.qza"
    params:
        script  = "rules/2_NCBI_build_db.sh",
        ref_dir = REF_DIR
    shell:
        r"""
        set -euo pipefail
        REF_DIR="{params.ref_dir}" bash "{params.script}"
        """

# =========================================================
# 1.5) FASTQ → sample_manifest.txt 생성
# =========================================================
rule make_manifest:
    input:
        # 순서 보장을 위해 build_db 출력에 의존 (파일 자체를 쓰진 않음)
        db  = rules.build_db.output.db,
        tax = rules.build_db.output.tax
    output:
        MANIFEST
    params:
        script    = "rules/make_manifest.sh",
        analysis  = ANALYSIS,
        fastq_dir = FASTQ_DIR,
        r1        = SUFFIX_R1,
        r2        = SUFFIX_R2
    shell:
        r"""
        set -euo pipefail
        ANALYSIS="{params.analysis}" FASTQ_DIR="{params.fastq_dir}" \
        SUFFIX_R1="{params.r1}" SUFFIX_R2="{params.r2}" \
        MANIFEST="{output}" bash "{params.script}"
        """

# =========================================================
# 2) 샘플 분석 (cutadapt/BLAST 등) — manifest & DB 입력 요구
# =========================================================
rule analyze:
    input:
        manifest = MANIFEST,
        db       = rules.build_db.output.db,
        tax      = rules.build_db.output.tax
    output:
        ".done/_3_analyze_sh.done"
    params:
        script        = "rules/3_analyze.sh",
        analysis      = ANALYSIS,
        threads_cut   = THREADS_CUTADAPT,
        threads_blast = THREADS_BLAST,
        ref_dir       = REF_DIR,
        manifest      = MANIFEST
    shell:
        r"""
        set -euo pipefail
        mkdir -p .done
        ANALYSIS="{params.analysis}" \
        THREADS_CUTADAPT="{params.threads_cut}" THREADS_BLAST="{params.threads_blast}" \
        REF_DIR="{params.ref_dir}" MANIFEST="{params.manifest}" \
        bash "{params.script}"
        date > {output}
        """

# =========================================================
# 3) MicrobiomeAnalyst 업로드용 파일(feature/tax/meta) 생성
# =========================================================
rule make_ma_upload_from_manifest_sh:
    input:
        ANALYZE_DONE,  # 순서 보장용
        f"{ANALYSIS}/ASV_quantified/feature-table.txt",
        f"{ANALYSIS}/sample_manifest.txt",
        script = "rules/make_MicroAnalysis_input.sh"
    output:
        ft   = f"{MA_UPLOAD_DIR}/feature_table_for_MA.txt",
        meta = f"{MA_UPLOAD_DIR}/metadata_for_MA.txt",
        tax  = f"{MA_UPLOAD_DIR}/taxonomy_for_MA.txt"
    params:
        analysis = ANALYSIS,
        ma_dir   = MA_DIR
    shell:
        r"""
        set -euo pipefail
        chmod +x "{input.script}"
        ANALYSIS="{params.analysis}" MA_DIR="{params.ma_dir}" \
        bash "{input.script}"

        # 산출물 존재 확인
        test -s "{output.ft}"
        test -s "{output.meta}"
        test -s "{output.tax}"
        """

# =========================================================
# 4) MicrobiomeAnalystR 전체 파이프라인 (alpha/beta/LEfSe 등)
#    -> scripts/microbiomeanalyst_pipeline.R 에서 처리
# =========================================================
rule run_microbiomeanalyst_pipeline:
    input:
        ft    = f"{MA_UPLOAD_DIR}/feature_table_for_MA.txt",
        meta  = f"{MA_UPLOAD_DIR}/metadata_for_MA.txt",
        tax   = f"{MA_UPLOAD_DIR}/taxonomy_for_MA.txt",
        script = "scripts/microbiomeanalyst_pipeline.R"
    output:
        touch(f"{MA_OUTDIR}/.done_pipeline")
    params:
        outdir = MA_OUTDIR,
        group  = MA_GROUP,
        #rq     = RAREFY_Q
    shell:
        r"""
        set -euo pipefail
        mkdir -p "{params.outdir}"
        "{RS_BIN}" "{input.script}" \
          --feat_fp "{input.ft}" \
          --tax_fp  "{input.tax}" \
          --meta_fp "{input.meta}" \
          --outdir  "{params.outdir}" \
          --group   "{params.group}" \
          #--rarefy_q {params.rq}
        date > "{output}"
        """

# =========================================================
# 5) pairwise LEfSe (ALL + 그룹쌍) — 전용 폴더로 출력
#    -> scripts/run_ma_lefse.R (getopt로 --group/--rarefy_q 지원)
# =========================================================
rule run_microbiomeanalyst_pairwise:
    input:
        ft     = f"{MA_UPLOAD_DIR}/feature_table_for_MA.txt",
        meta   = f"{MA_UPLOAD_DIR}/metadata_for_MA.txt",
        tax    = f"{MA_UPLOAD_DIR}/taxonomy_for_MA.txt",
        script = "scripts/run_ma_lefse.R"
    output:
        touch(f"{LEFSE_OUTDIR}/.done_pairwise")
    params:
        outdir = LEFSE_OUTDIR,
        group  = MA_GROUP,
        #rq     = RAREFY_Q
    shell:
        r"""
        set -euo pipefail
        mkdir -p "{params.outdir}"
        "{RS_BIN}" "{input.script}" \
          --feat_fp "$(realpath "{input.ft}")" \
          --tax_fp  "$(realpath "{input.tax}")" \
          --meta_fp "$(realpath "{input.meta}")" \
          --outdir  "$(realpath -m "{params.outdir}")" \
          --group   "{params.group}" \
          #--rarefy_q {params.rq}
        date > "{output}"
        """

# =========================================================
# 6) 그림/결과물 수집 (평탄화)
# =========================================================
rule collect_ma_figures:
    input:
        f"{MA_OUTDIR}/.done_pipeline"
    output:
        touch(f"{MA_OUTDIR}/.done_figures")
    params:
        outdir = MA_OUTDIR,
        dest   = f"{MA_OUTDIR}/99_Figures"
    shell:
        r"""
        set -euo pipefail
        OUT="{params.outdir}"
        DEST="{params.dest}"
        mkdir -p "$DEST"

        # PNG/PDF 수집 (자기 자신 폴더 제외)
        find "$OUT" -type f \( -iname '*.png' -o -iname '*.pdf' \) ! -path "$DEST/*" -print0 \
          | while IFS= read -r -d '' f; do
                rel="${f#"$OUT/"}"
                safe="${rel//\//__}"
                cp -f "$f" "$DEST/$safe"
            done

        # 인덱스 작성
        printf "collected\toriginal_path\n" > "$DEST/_index.tsv"
        find "$DEST" -type f \( -iname '*.png' -o -iname '*.pdf' \) -printf "%f\t$OUT/99_Figures/%f\n" >> "$DEST/_index.tsv"

        date > "{output}"
        """

